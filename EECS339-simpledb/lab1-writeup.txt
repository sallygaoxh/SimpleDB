<Describe any design decisions you made. These may be minimal for Lab 1.>
TupleDesc class: 
The TupleDesc class has an attributes: TDItemList.
TDItemList is an arraylist of TDItem, which stores the type and the name of each field.

Tuple class:
Each tuple object obeys a description, which is determined by its attribute td.
All the field of each tuple object are stored in its attribute fieldList.
Each tuple object can be identified uniquely with an attribute name recordId, contains the information of the pageId it belongs to and the tupleNo in this page.

Catalog class:
Each catalog object stores all the tables in the dababase. One database has one and only one catalog object. The tables in catalog are formed as DbFile, the names and primary keys for each table are also stored.

BufferPool class:
BufferPool is used to store pages for database processing. It protect the table from being read and written at the same time and resulting in incorrect data. 
The pages in BufferPool can belong to different tables. Thus, I have define an attribute named bufferList to store all the pages existing in the BufferPool.
In lab1, I finished the readPage() function of BufferPool class. First, compare the PageId of required page with all the pages in bufferList, if the page is already in bufferList, return it. If the page is not in the BufferPool, I will load it from the corresponding HeapFile, and store it in the BufferPool

HeapFile class:
HeapFile is a class implementing the DbFile interface. It links the table with the data on the disk. Each table in the database corresponds to one and only one HeapFile. HeapFile is a set of HeapPages.

HeapPage class:
A HeapPage implements the Page interface. It is the element of a HeapFile. 

HeapPageId class:
This class implements the PageId interface. It contains two int attributes: tableId and pageNo. The tableId identifies the table it belongs to. Using HeapPage.tableId, we can retrieve the information about the table. The pageNo identifies the order of this page in the whole table (HeapFile). It can be used as the offset when reading and writing pages to or from HeapFiles.
All the HeapPages in one HeapFile share the same tableId. The '-1' pageNo is a placeholder for when we create a table that does not have any pages yet.

RecordID class:
It is used to identify the specific tuple in one HeapFile, consisting of pageId and tupleno.

SeqScan class:
It is designed to be an OpIterator, which can go through each tuple in one table. Besides, it will rename the tuple descriptor, adding on the table name to the fieldname in the form of "tableName.fieldName".

<Describe any missing or incomplete elements of your code.>
All the tests have been passed.

<Describe how long you spent on the lab, and whether there was anything you found particularly difficult or confusing.>
I spent one week on the lab1, and the most confusing part is to understand the relationship between each Class. 
The test logic is also difficult to understand sometimes when try to figure out why the test failed. Even if I have passed all the simpleDb tests, I still failed the simpleDb.systemTest. Maybe the simpleDB tests should be remodeled.